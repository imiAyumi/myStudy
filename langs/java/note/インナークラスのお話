
インナークラスのお話。

--- これは、設計に繋がる (かもしれない) 物語。

とある機能を外部に提供する場合、公開するのは「型情報・機能 (API)」のみであり、「中身 (実装)」と がどうなっているかは公開しない。
ので、機能のまとめたパッケージ中には、以下 3 つが含まれる。

　型情報・機能
　　= public なインターフェース
　中身
　　= インターフェースを実現した default (同じパッケージならアクセス可能) の impl クラス
　中身を生成して返す奴
　　= public な factory クラス

呼び出し側はこんな感じ。
　main (String[] args) {
　　Sample sample = Factory.createSample(); // createSample() は static メソッド
　}


で、簡単なものであればいいけど、複雑になると同じパッケージ内で impl クラス間の結合が強くなってしまうことがある。
できれば「このクラスにアクセスできるのはこのクラスのみ (impl にアクセスできるのは factory のみ、とか)」を実装で実現したい。
そのために生まれたのがインナークラス。
private (static) なインナークラスであれば、インナークラスを内包するクラスのみがアクセスできる。
つまり、Factory クラス内に impl クラスを作れば良い。

総括：インナークラスは同じパッケージ内のクラス間で密結合になるのを避けるのに使える。
　　　カプセル化で情報隠蔽って奴ですね！
